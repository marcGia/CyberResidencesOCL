-------------------------------------------------------------------------------
--                           CyberResidencesOCL.use
-------------------------------------------------------------------------------

model CyberResidences


enum Category {
    economy,
    standard,
    premium,
    prestige
}


enum Gender {
    male,
    female
}


class Residence
attributes
    name     : String
    floorMin : Integer
    floorMax : Integer
    category : Category
    maxNbOfFreeUnits : Integer -- @derived
    avgRate : Real             -- @derived
operations
    -- Set of bedrooms of the residence.
    bedrooms() : Set(Bedroom) =
        rooms->select(oclIsKindOf(Bedroom))->oclAsType(Set(Bedroom))
    -- Set of useful bedrooms.
    usefulBedrooms() : Set(Bedroom) =
        bedrooms()->select(not isOutOfOrder)
    -- Set of residence bathrooms
    bathrooms() : Set(Bathroom) =
        rooms->select(oclIsKindOf(Bathroom))->oclAsType(Set(Bathroom))
end


class Room
attributes
    number : Integer
    floor : Integer -- @derived
    isOutOfOrder : Boolean
end


class Bathroom < Room
attributes
    isOnTheLanding : Boolean
end

class Bedroom < Room
attributes
    nbOfSingleBeds : Integer
    nbOfDoubleBeds : Integer
    rate : Real
    isNonSmoking : Boolean
    nbOfUnits : Integer -- @derived
end

associationclass Rent
between
    Bedroom [1..*] role rentedBedroom
    Tenant [0..1] role tenant
attributes
    discount : Real -- @derived
    rate : Real     -- @derived
end

class Discount
attributes
    percentage : Integer
    label : String
end

class Person
attributes
    name : String
    age : Integer
    gender : Gender
end

class Resident < Person
attributes
    isSmoker : Boolean
end

class Tenant < Resident
attributes
    paidRate : Real -- @derived
end


-- associations

composition HasDiscounts between
    Rent [1] role rent
    Discount [*] role discounts
end

association IsTutoredBy between
    Resident [0..2] role tutors
    Resident [*] role tutored
end

association isMarriedWith between
    Resident [0..1] role consort
    Resident [0..1]
end

association IsInBedroom between
  Bathroom[0..3] role bathrooms
  Bedroom[0..1] role bedrooms
end

composition ContainsRooms between
  Residence[1] role residence
  Room[*] role rooms
end

composition occupiedRoom between
  Bedroom[1] role IsOccupiedBy
  Resident[*] role occupants
end


constraints

-------------------------------------------------------------------------------
--                               aboooConditions
-------------------------------------------------------------------------------
-- Conditions for granting a discount "All Bathrooms Out Of Order" (ABOOO).
-- Note Easy. Use 'one'. Should world with 'xxxPercentage'

context Rent inv aboooConditions:
    -- A discount is given for bedrooms that have all bathrooms out of
    -- order. The label of this type of discount is 'BROOO50'. This
    -- rule does not apply in economy residences.
	let r: Residence = self.rentedBedroom.residence in
		r.category<>Category::economy implies
			r.bathrooms()->select(b: Bathroom | b.isOutOfOrder = true)->size() = r.bathrooms()->size() implies
				self.discount >= 0 and self.discounts->forAll(d: Discount | d.label='BROOO50')
				

-------------------------------------------------------------------------------
--                               aboooPercentage
-------------------------------------------------------------------------------
-- Percentage of "ABOOO" discount according to residence category.
-- Not Easy. Should work with the corresponding invariant 'xxxConditions'

-- context Discount inv aboooPercentage:
    -- ABOO discounts are equal to 50%.


-------------------------------------------------------------------------------
--                                 adultMarried
-------------------------------------------------------------------------------
-- Only adult married.
-- Easy. Use 'implies'

context Resident inv adultMarried:
    -- To be registered as married, resident must be adult.
	self.consort->notEmpty() implies self.age >= 18


-------------------------------------------------------------------------------
--                                 adultTenant
-------------------------------------------------------------------------------
-- Tenants are adults.
-- Easy

context Tenant inv adultTenant:
    -- The minimal age to rent a bedroom is 18 years old.
	self.age > 17


-------------------------------------------------------------------------------
--                             allPrestigeBathrooms
-------------------------------------------------------------------------------
-- Invariant about all bathrooms for 'prestige' residence.
-- Medium. use 'implies'.

context Residence inv allPrestigeBathrooms:
    -- Residences of category prestige have in each bedroom at least
    -- the same number of bathroom that the number of beds.
	self.category = Category::prestige  
		implies self.bedrooms()->collect(nbOfDoubleBeds+nbOfSingleBeds)->sum() >= self.bathrooms()->size()


-------------------------------------------------------------------------------
--                                 atLeastABed
-------------------------------------------------------------------------------
-- At least one bed for useful bedrooms.
-- Easy. Use implies.

context Bedroom inv atLeastABed:
    -- Bedrooms that are not out of order must have at least one bed.
	self.isOutOfOrder implies (nbOfSingleBeds > 0 or nbOfDoubleBeds > 0)

-------------------------------------------------------------------------------
--                               atLeastOneAdult
-------------------------------------------------------------------------------
-- At least one adult per room.
-- Easy. Use 'implies'

context Bedroom inv atLeastOneAdult:
    -- At least one adult must be presented in all occupied rooms.
	self.occupants->select(age>17)->notEmpty()


-------------------------------------------------------------------------------
--                               childNonSmoking
-------------------------------------------------------------------------------
-- Non smoking child.
-- Easy


context Resident inv childNonSmoking:
    -- Children are always declared as non smoker.
	self.age < 18 implies self.isSmoker = false


-------------------------------------------------------------------------------
--                                 childTutored
-------------------------------------------------------------------------------
-- Child tutored.
-- Medium

context Resident inv childTutored:
    -- Resident that are less than 18 years old must have at least one
    -- tutor, apart in prestige residences where this rule does not
    -- apply.
	self.age < 18 and self.IsOccupiedBy.residence.category <> Category::prestige implies self.tutors->size() > 0

-------------------------------------------------------------------------------
--                              cumulatedDiscounts
-------------------------------------------------------------------------------
-- Limit of cumulated discounts.
-- Easy. Use 'sum'

context Rent inv cumulatedDiscounts:
    -- No room will have more that 70% of dicounts cumulated.
    self.discount <= self.discounts->collect(percentage)->sum()


-------------------------------------------------------------------------------
--                                deriveAvgRate
-------------------------------------------------------------------------------
-- Derivation of the avgRate attribute.
-- Medium

--context Residence inv deriveAvgRate:
    -- The average rate of a residence is the total revenue of the
    -- residence divided by the number of occupants. Tutored residents
    -- do not count in this rule

-------------------------------------------------------------------------------
--                                deriveDiscount
-------------------------------------------------------------------------------
-- Derivation of the attribute discount.
-- Easy

context Rent inv deriveDiscount:
    -- The discount for a rent, is the rate of the bedroom multiplied
    -- by the sum of percentages of all discounts.
    self.discount = self.rate*self.discounts->collect(percentage)->sum()


-------------------------------------------------------------------------------
--                                 deriveFloor
-------------------------------------------------------------------------------
-- Derivation of the attribute floor.
-- Easy

context Room inv deriveFloor:
    -- The floor number correspond to the first digits of the room
    -- number, where the last two digits are removed. For instance the
    -- room 634 is at the floor 6.
	self.floor = self.number div 100
	


-------------------------------------------------------------------------------
--                             deriveIsOnTheLanding
-------------------------------------------------------------------------------
-- Derivation of isOnTheLanding attribute.
-- Easy

context Bathroom inv deriveIsOnTheLanding:
    -- A bathroom is said to be on the landing if it is not in a
    -- bedroom.
	self.isOnTheLanding = true
	

-------------------------------------------------------------------------------
--                            deriveMaxNbOfFreeUnits
-------------------------------------------------------------------------------
-- Derivation of maxNbOfFreeUnits attribute.
-- Easy

context Residence inv deriveMaxNbOfFreeUnits:
    -- The maximum number of free units is equal to the maximum number
    -- of places in beds of all rooms of the residence.
	self.maxNbOfFreeUnits = self.bedrooms()->collect(nbOfDoubleBeds+nbOfSingleBeds)->sum()
	

-------------------------------------------------------------------------------
--                               deriveNbOfUnits
-------------------------------------------------------------------------------
-- Derivation of nbOfUnits attribute.
-- Easy

-- context Bedroom inv deriveNbOfUnits:
    -- The number of units of a bedroom is the maximum number of
    -- people that can fit within the bedroom assuming that all places
    -- in all beds are full.
	-- ????? pas compris


-------------------------------------------------------------------------------
--                                derivePaidRate
-------------------------------------------------------------------------------
-- Derivation of the attribute paidRate.
-- Not Easy. Use 'if ... then ... else ... endif'   and
-- 'let groupFloors : Set(Integer) = ... in ...'

context Tenant inv derivePaidRate:
    -- The total amount paid by a tenant is the sum of rent rates for
    -- all bedrooms rented. If the members of his or her group is
    -- spread over more than one floor, then 20€ of reduction will
    -- automatically be deduced.
	let groupFloors : Set(Integer) = self.rentedBedroom->collect(occupants)->collect(IsOccupiedBy.floor)->asSet() in
		if groupFloors->size() > 1 then
			self.paidRate = self.rentedBedroom->collect(rate)->sum() - 20
		else
			self.paidRate = self.rentedBedroom->collect(rate)->sum()
		endif
-------------------------------------------------------------------------------
--                                  deriveRate
-------------------------------------------------------------------------------
-- Derivation of the attribute rate.
-- Easy

context Rent inv deriveRate:
    -- The rate of a rent corresponds to the regular rate for the room
    -- minus the discount.
	self.rate = self.rentedBedroom.rate - self.discount

-------------------------------------------------------------------------------
--                               domainPercentage
-------------------------------------------------------------------------------
-- Domain of percentage attribute.
-- Easy

context Discount inv domainPercentage:
    -- The percentage is a value between 1 and 100.
	1 <= self.percentage and self.percentage <= 100

-------------------------------------------------------------------------------
--                          enoughBathroomsInPrestige
-------------------------------------------------------------------------------
-- At least as many bathrooms than beds for prestige residence.
-- Easy. Use implies.

context Bedroom inv enoughBathroomsInPrestige:
    -- In a prestige residence, the number of private bathrooms is at
    -- least the same as the number of beds in each bedroom.
	self.residence.category = Category::prestige 
		implies self.nbOfSingleBeds+self.nbOfDoubleBeds >= self.bathrooms->size()

-------------------------------------------------------------------------------
--                            floorBetweenMinAndMax
-------------------------------------------------------------------------------
-- Floor between minimum and maximum floors.
-- Easy

context Room inv floorBetweenMinAndMax:
    -- The floor of a room is between the minium and maximum floor of
    -- the residence.
	self.floor >= self.residence.floorMin and self.floor <= self.residence.floorMax
	

-------------------------------------------------------------------------------
--                                  floorOrder
-------------------------------------------------------------------------------
-- Order between floorMin and floorMax attributes.
-- Easy

context Residence inv floorOrder:
    -- The maximum floor is at higher or at the same level that the
    -- minimum floor of the residence.
	self.floorMax >= self.floorMin
	

-------------------------------------------------------------------------------
--                                 labelUnique
-------------------------------------------------------------------------------
-- Uniqueness of labels with respect to rents.
-- Easy. Use 'unique'

context Rent inv labelUnique:
    -- All discounts associated to a rent have distinct labels.
	self.discounts->isUnique(label)


-------------------------------------------------------------------------------
--                           marriageAntiReflexivity
-------------------------------------------------------------------------------
-- Anti-reflexivity of marriage relationship.
-- Easy

context Resident inv marriageAntiReflexivity:
    -- A resident cannot mary with himself or herself.
	self.consort->notEmpty() implies self.consort <> self.consort.consort

-------------------------------------------------------------------------------
--                             marriageInSameGroup
-------------------------------------------------------------------------------
-- Consorts in the same group.
-- Medium

context Resident inv marriageInSameGroup:
    -- A resident and his or her consort occupies a room of the same
    -- group.
	self.consort->notEmpty() implies self.consort.IsOccupiedBy = self.consort.consort.IsOccupiedBy

-------------------------------------------------------------------------------
--                               marriageSymmetry
-------------------------------------------------------------------------------
-- Symmetry of marriage relationship.
-- Easy

context Resident inv marriageSymmetry:
    -- If a resident is declared to be the consort of another
    -- resident, then the opposite is true as well.
	self.consort->notEmpty() implies self.consort.consort->notEmpty()
	
-------------------------------------------------------------------------------
--                              noBedroomOverload
-------------------------------------------------------------------------------
-- No bedroom overloaded.
-- Medium

-- context Bedroom inv noBedroomOverload:
    -- There must be no more people in a bedroom that the number of
    -- units of this bedroom. Children up to 3 years old are not
    -- counted in this rule.


-------------------------------------------------------------------------------
--                            noEmptyRentedBedrooms
-------------------------------------------------------------------------------
-- Rented bedrooms not empty.
-- Easy. Use 'implies'

context Bedroom inv noEmptyRentedBedrooms:
    -- All rented bedrooms are occupied by at least one occupant.
	self.tenant->size() = 1 implies self.occupants->notEmpty()


-------------------------------------------------------------------------------
--                                  noSquaters
-------------------------------------------------------------------------------
-- Nobody in rooms not rented.
-- Easy. Use 'implies'

context Bedroom inv noSquaters:
    -- Occupants must be exclusively in rooms that are rented by
    -- somebody.
	self.tenant->size() = 0 implies self.occupants->size() = 0

-------------------------------------------------------------------------------
--                               noTutorForAdults
-------------------------------------------------------------------------------
-- No tutor for adults.
-- Easy

context Resident inv noTutorForAdults:
    -- Adults never have tutor.
	self.age > 18 implies self.tutors->isEmpty()


-------------------------------------------------------------------------------
--                             oooBedroomsNotRented
-------------------------------------------------------------------------------
-- No rental of Out Of Order bedrooms.
-- Easy

context Bedroom inv oooBedroomsNotRented:
    -- Bedrooms that are out of order cannot be rented.
	self.isOutOfOrder implies self.tenant->isEmpty()


-------------------------------------------------------------------------------
--                                oooIfPrestige
-------------------------------------------------------------------------------
-- Out of order bathroom implications if prestige. 
-- Medium. Use 'implies'

context Bathroom inv oooIfPrestige:
    -- In prestige residences, it is not acceptable to rent bedrooms
    -- with bathrooms that are out of order. So if a bathrom is marked
    -- as out of order, the corresponding bedroom is also marked as
    -- out of order.
	(self.residence.category = Category::prestige and self.isOutOfOrder) implies self.bedrooms.isOutOfOrder


-------------------------------------------------------------------------------
--                              rentInOneResidence
-------------------------------------------------------------------------------
-- Medium. Should be rather short.
-- <Enter note text here>

context Tenant inv rentInOneResidence:
    -- For a given tenant, all rented bedrooms are in the same
    -- residence.
	self.rentedBedroom->forAll(b1,b2: Bedroom | b1.residence = b2.residence)

-------------------------------------------------------------------------------
--                             sameNumberIfPrivate
-------------------------------------------------------------------------------
-- Same number if private.
-- Easy. Use 'implies'.

context Bathroom inv sameNumberIfPrivate:
    -- All bathrooms that are not on the landing, that is that are
    -- private to a bedroom, have the same number of room as this
    -- bedroom.
	self.isOnTheLanding = false implies self.bedrooms->size() = 1 and self.number = self.bedrooms.number


-------------------------------------------------------------------------------
--                               sboooConditions
-------------------------------------------------------------------------------
-- Conditions for granting a discount "Some Bathrooms Out Of Order" (SBOOO).
-- Not Easy. Use 'one'. Should world with 'xxxPercentage'

-- context Rent inv sboooConditions:
    -- A discount if given for a bed room if there are "Some Bathrooms
    -- Out Of Order", that is for bedroom with at least one bathroom
    -- out of order, but at least one bathroom still available.  The
    -- label for this type of discount is SBOO. This type of discount
    -- does not apply on economy residences.


-------------------------------------------------------------------------------
--                               sboooPercentage
-------------------------------------------------------------------------------
-- Percentage of "SBOOO" discount according to residence category.
-- Not Easy. Should work with the corresponding invariant 'xxxConditions'

-- context Discount inv sboooPercentage:
    -- In premium residences, SBOO discounts are equal to 25%. For
    -- standard category the discount is of 10%.


-------------------------------------------------------------------------------
--                             smokingPremiumPolicy
-------------------------------------------------------------------------------
-- Smoking policy for premium residences.
-- Not easy

context Bedroom inv smokingPremiumPolicy:
    -- In a premium residence a resident that specified that he or she
    -- is non smoker will never ever be place in a smoking room.
	self.occupants->forAll(r : Resident | r.isSmoker = false) implies self.isNonSmoking


-------------------------------------------------------------------------------
--                            smokingPrestigePolicy
-------------------------------------------------------------------------------
-- No smoking is prestige.
-- Easy

context Bedroom inv smokingPrestigePolicy:
    -- There are no smoking rooms at all in residence of prestige.
	self.residence.category = Category::prestige implies self.isNonSmoking

-------------------------------------------------------------------------------
--                              tenantInRentedRoom
-------------------------------------------------------------------------------
-- Room occupied by the tenant.
-- Medium. 

context Tenant inv tenantInRentedRoom:
    -- A tenant occupies one of the bedroom that he or she has rented.
	self.rentedBedroom->exists(b: Bedroom | b = self.IsOccupiedBy)

-------------------------------------------------------------------------------
--                                  tutorAdult
-------------------------------------------------------------------------------
-- Tutors are adults.
-- Easy

context Resident inv tutorAdult:
    -- A resident can not be the tutor of another resident if he or
    -- she is not an adult.
	self.age < 18 implies self.tutored->size() = 0

-------------------------------------------------------------------------------
--                               tutorInSameGroup
-------------------------------------------------------------------------------
-- Tutors and tutored in one group.
-- Medium

context Resident inv tutorInSameGroup:
    -- The tutors of a resident are in the same group that this
    -- resident. In other words they are all in the same group of
    -- rooms.
	-- ?? Define a group.
	self.tutored->forAll(r: Resident | r.IsOccupiedBy.residence = self.IsOccupiedBy.residence)

-------------------------------------------------------------------------------
--                     uniqueNumberApartForPrivateBathroom
-------------------------------------------------------------------------------
-- Invariant on room numbering.
-- Medium

context Residence inv uniqueNumberApartForPrivateBathroom:
    -- All rooms have a distinct number, except private bathrooms.
	-- (self.rooms - self.bathrooms()->select(b: Bathroom | b.isOnTheLanding = false))->isUnique(number)
	self.bedrooms()->union(self.bathrooms()->select(b: Bathroom | b.isOnTheLanding = true))->isUnique(number)
	
